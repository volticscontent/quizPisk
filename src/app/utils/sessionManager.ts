// Gerenciador de sess√µes por cliente
export class SessionManager {
  private sessionId: string;

  constructor(sessionId?: string) {
    this.sessionId = sessionId || this.generateSessionId();
  }

  // Gera um ID √∫nico para a sess√£o
  private generateSessionId(): string {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(2, 15);
    return `session_${timestamp}_${random}`;
  }

  // Obt√©m o ID da sess√£o atual
  getSessionId(): string {
    return this.sessionId;
  }

  // Cria uma nova sess√£o
  createNewSession(): string {
    this.sessionId = this.generateSessionId();
    this.clearSessionData(); // Limpa dados da sess√£o anterior
    return this.sessionId;
  }

  // Salva dados espec√≠ficos da sess√£o
  setSessionData(key: string, data: unknown): void {
    if (typeof window === 'undefined') return;
    
    try {
      const sessionKey = `${this.sessionId}_${key}`;
      localStorage.setItem(sessionKey, JSON.stringify(data));
      console.log(`üíæ Dados salvos para sess√£o ${this.sessionId}:`, key, data);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao salvar dados da sess√£o:', error);
    }
  }

  // Recupera dados espec√≠ficos da sess√£o
  getSessionData<T>(key: string, defaultValue?: T): T | null {
    if (typeof window === 'undefined') return defaultValue || null;
    
    try {
      const sessionKey = `${this.sessionId}_${key}`;
      const stored = localStorage.getItem(sessionKey);
      
      if (stored) {
        const parsed = JSON.parse(stored);
        console.log(`üìÇ Dados recuperados para sess√£o ${this.sessionId}:`, key, parsed);
        return parsed;
      }
      
      return defaultValue || null;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao recuperar dados da sess√£o:', error);
      return defaultValue || null;
    }
  }

  // Remove dados espec√≠ficos da sess√£o
  removeSessionData(key: string): void {
    if (typeof window === 'undefined') return;
    
    try {
      const sessionKey = `${this.sessionId}_${key}`;
      localStorage.removeItem(sessionKey);
      console.log(`üóëÔ∏è Dados removidos para sess√£o ${this.sessionId}:`, key);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao remover dados da sess√£o:', error);
    }
  }

  // Limpa todos os dados da sess√£o atual
  clearSessionData(): void {
    if (typeof window === 'undefined') return;
    
    try {
      const keysToRemove: string[] = [];
      
      // Encontra todas as chaves relacionadas a esta sess√£o
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.startsWith(`${this.sessionId}_`)) {
          keysToRemove.push(key);
        }
      }
      
      // Remove todas as chaves da sess√£o
      keysToRemove.forEach(key => localStorage.removeItem(key));
      
      console.log(`üßπ Dados da sess√£o ${this.sessionId} limpos (${keysToRemove.length} itens)`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao limpar dados da sess√£o:', error);
    }
  }

  // Lista todas as sess√µes ativas
  static getActiveSessions(): string[] {
    if (typeof window === 'undefined') return [];
    
    try {
      const sessions = new Set<string>();
      
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.startsWith('session_')) {
          const sessionId = key.split('_')[0] + '_' + key.split('_')[1] + '_' + key.split('_')[2];
          sessions.add(sessionId);
        }
      }
      
      return Array.from(sessions);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao listar sess√µes ativas:', error);
      return [];
    }
  }

  // Limpa todas as sess√µes (√∫til para limpeza geral)
  static clearAllSessions(): void {
    if (typeof window === 'undefined') return;
    
    try {
      const keysToRemove: string[] = [];
      
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.startsWith('session_')) {
          keysToRemove.push(key);
        }
      }
      
      keysToRemove.forEach(key => localStorage.removeItem(key));
      
      console.log(`üßπ Todas as sess√µes limpas (${keysToRemove.length} itens)`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao limpar todas as sess√µes:', error);
    }
  }

  // Obt√©m estat√≠sticas das sess√µes
  static getSessionStats(): { totalSessions: number; totalKeys: number; sessions: string[] } {
    if (typeof window === 'undefined') return { totalSessions: 0, totalKeys: 0, sessions: [] };
    
    try {
      const sessions = SessionManager.getActiveSessions();
      const totalKeys = Object.keys(localStorage).filter(key => key.startsWith('session_')).length;
      
      return {
        totalSessions: sessions.length,
        totalKeys,
        sessions
      };
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao obter estat√≠sticas das sess√µes:', error);
      return { totalSessions: 0, totalKeys: 0, sessions: [] };
    }
  }

  // Verifica se a sess√£o tem dados salvos
  hasSessionData(): boolean {
    if (typeof window === 'undefined') return false;
    
    try {
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.startsWith(`${this.sessionId}_`)) {
          return true;
        }
      }
      return false;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao verificar dados da sess√£o:', error);
      return false;
    }
  }

  // Exporta todos os dados da sess√£o
  exportSessionData(): Record<string, unknown> {
    if (typeof window === 'undefined') return {};
    
    try {
      const sessionData: Record<string, unknown> = {};
      
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.startsWith(`${this.sessionId}_`)) {
          const dataKey = key.replace(`${this.sessionId}_`, '');
          const value = localStorage.getItem(key);
          if (value) {
            sessionData[dataKey] = JSON.parse(value);
          }
        }
      }
      
      return sessionData;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao exportar dados da sess√£o:', error);
      return {};
    }
  }
} 